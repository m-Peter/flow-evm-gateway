// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	flow "github.com/onflow/flow-go-sdk"
	common "github.com/onflow/go-ethereum/common"

	json "encoding/json"

	mock "github.com/stretchr/testify/mock"
)

// Downloader is an autogenerated mock type for the Downloader type
type Downloader struct {
	mock.Mock
}

// Download provides a mock function with given fields: txID, blockIO
func (_m *Downloader) Download(txID common.Hash, blockIO flow.Identifier) (json.RawMessage, error) {
	ret := _m.Called(txID, blockIO)

	if len(ret) == 0 {
		panic("no return value specified for Download")
	}

	var r0 json.RawMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Hash, flow.Identifier) (json.RawMessage, error)); ok {
		return rf(txID, blockIO)
	}
	if rf, ok := ret.Get(0).(func(common.Hash, flow.Identifier) json.RawMessage); ok {
		r0 = rf(txID, blockIO)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(json.RawMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(common.Hash, flow.Identifier) error); ok {
		r1 = rf(txID, blockIO)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDownloader creates a new instance of Downloader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDownloader(t interface {
	mock.TestingT
	Cleanup(func())
}) *Downloader {
	mock := &Downloader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
